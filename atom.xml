<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[永不言弃]]></title>
  <link href="http://devcatin.github.io/atom.xml" rel="self"/>
  <link href="http://devcatin.github.io/"/>
  <updated>2015-04-17T17:37:01+08:00</updated>
  <id>http://devcatin.github.io/</id>
  <author>
    <name><![CDATA[Grant]]></name>
    <email><![CDATA[605435554@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IOS UIWebView 长按图片保存到本地相册]]></title>
    <link href="http://devcatin.github.io/blog/2015/04/17/ios-uiwebview-chang-an-tu-pian-bao-cun-dao-ben-di-xiang-ce/"/>
    <updated>2015-04-17T17:36:47+08:00</updated>
    <id>http://devcatin.github.io/blog/2015/04/17/ios-uiwebview-chang-an-tu-pian-bao-cun-dao-ben-di-xiang-ce</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于第三方微信授权登录的iOS代码分析]]></title>
    <link href="http://devcatin.github.io/blog/2014/12/17/markdownyu-fa-shuo-ming-jian-ti-zhong-wen-ban/"/>
    <updated>2014-12-17T13:14:31+08:00</updated>
    <id>http://devcatin.github.io/blog/2014/12/17/markdownyu-fa-shuo-ming-jian-ti-zhong-wen-ban</id>
    <content type="html"><![CDATA[<p>微信已经深入到每一个APP的缝隙，最常用的莫过分享和登录了，接下来就以代码的形式来展开微信登录的相关说明，至于原理级别的oauth2.0认证体系请参考微信开放平台的相关说明和图示 <a href="https://open.weixin.qq.com/">https://open.weixin.qq.com/</a></p>

<!--more-->


<h2>微信登录授权开发</h2>

<blockquote><p>1.到微信开发平台注册相关APP，现在是等待审核成功后才能获取到对应的<code>key</code>和<code>secret</code>；获取成功后需要单独申请开通登录和支付接口，如图</p></blockquote>

<p><img src="https://raw.githubusercontent.com/zhangkt/zhangkt.github.com/master/images/blogimages/1411370441623372.png" alt="" /></p>

<p>2.和QQ类似，需要填写<code>Url Schemes</code>，如demo中的wxd930ea5d5a258f4f ，然后引入相应framework；</p>

<p>3.在AppDelegate中注册和实现授权后的回调函数，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="err">向微信注册</span>
</span><span class='line'>  <span class="o">[</span><span class="no">WXApi</span> <span class="ss">registerApp</span><span class="p">:</span><span class="n">kWXAPP_ID</span> <span class="ss">withDescription</span><span class="p">:</span><span class="err">@</span><span class="s2">&quot;weixin&quot;</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'><span class="sr">//</span><span class="err">授权后回调</span> <span class="no">WXApiDelegate</span>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="n">void</span><span class="p">)</span><span class="ss">onResp</span><span class="p">:(</span><span class="no">BaseReq</span> <span class="o">*</span><span class="p">)</span><span class="n">resp</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="sr">/* </span>
</span><span class='line'><span class="sr">    ErrCode ERR_OK = 0(用户同意) </span>
</span><span class='line'><span class="sr">    ERR_AUTH_DENIED = -4（用户拒绝授权） </span>
</span><span class='line'><span class="sr">    ERR_USER_CANCEL = -2（用户取消） </span>
</span><span class='line'><span class="sr">    code    用户换取access_token的code，仅在ErrCode为0时有效 </span>
</span><span class='line'><span class="sr">    state   第三方程序发送时用来标识其请求的唯一性的标志，由第三方程序调用sendReq时传入，由微信终端回传，state字符串长度不能超过1K </span>
</span><span class='line'><span class="sr">    lang    微信客户端当前语言 </span>
</span><span class='line'><span class="sr">    country 微信用户当前国家信息 </span>
</span><span class='line'><span class="sr">    */</span>
</span><span class='line'>    <span class="no">SendAuthResp</span> <span class="o">*</span><span class="n">aresp</span> <span class="o">=</span> <span class="p">(</span><span class="no">SendAuthResp</span> <span class="o">*</span><span class="p">)</span><span class="n">resp</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">aresp</span><span class="o">.</span><span class="n">errCode</span><span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="no">NSString</span> <span class="o">*</span><span class="n">code</span> <span class="o">=</span> <span class="n">aresp</span><span class="o">.</span><span class="n">code</span><span class="p">;</span>
</span><span class='line'>        <span class="no">NSDictionary</span> <span class="o">*</span><span class="n">dic</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="err">@</span><span class="s2">&quot;code&quot;</span><span class="ss">:code</span><span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="sr">//</span><span class="err">和</span><span class="no">QQ</span><span class="p">,</span><span class="err">新浪并列回调句柄</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="no">BOOL</span><span class="p">)</span><span class="ss">application</span><span class="p">:(</span><span class="no">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span> <span class="ss">openURL</span><span class="p">:(</span><span class="no">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="n">url</span> <span class="ss">sourceApplication</span><span class="p">:(</span><span class="no">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">sourceApplication</span> <span class="ss">annotation</span><span class="p">:(</span><span class="nb">id</span><span class="p">)</span><span class="n">annotation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">[</span><span class="no">TencentOAuth</span> <span class="ss">HandleOpenURL</span><span class="p">:</span><span class="n">url</span><span class="o">]</span> <span class="o">||</span>
</span><span class='line'>    <span class="o">[</span><span class="no">WeiboSDK</span> <span class="ss">handleOpenURL</span><span class="p">:</span><span class="n">url</span> <span class="ss">delegate</span><span class="p">:</span><span class="nb">self</span><span class="o">]</span> <span class="o">||</span>
</span><span class='line'>    <span class="o">[</span><span class="no">WXApi</span> <span class="ss">handleOpenURL</span><span class="p">:</span><span class="n">url</span> <span class="ss">delegate</span><span class="p">:</span><span class="nb">self</span><span class="o">]</span><span class="p">;;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="no">BOOL</span><span class="p">)</span><span class="ss">application</span><span class="p">:(</span><span class="no">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span> <span class="ss">handleOpenURL</span><span class="p">:(</span><span class="no">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="n">url</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">[</span><span class="no">TencentOAuth</span> <span class="ss">HandleOpenURL</span><span class="p">:</span><span class="n">url</span><span class="o">]</span> <span class="o">||</span>
</span><span class='line'>    <span class="o">[</span><span class="no">WeiboSDK</span> <span class="ss">handleOpenURL</span><span class="p">:</span><span class="n">url</span> <span class="ss">delegate</span><span class="p">:</span><span class="nb">self</span><span class="o">]</span> <span class="o">||</span>
</span><span class='line'>    <span class="o">[</span><span class="no">WXApi</span> <span class="ss">handleOpenURL</span><span class="p">:</span><span class="n">url</span> <span class="ss">delegate</span><span class="p">:</span><span class="nb">self</span><span class="o">]</span><span class="p">;;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>4.微信登录授权比较复杂，相比QQ，新浪多了几步，简单说就是需要三步，第一步，获取<code>code</code>，这个用来获取token，第二步，就是带上code获取<code>token</code>，第三步，根据第二步获取的token和openid来获取用户的相关信息；</p>

<p>下面用代码来实现：</p>

<p>第一步：code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="no">IBAction</span><span class="p">)</span><span class="ss">weixinLogin</span><span class="p">:(</span><span class="nb">id</span><span class="p">)</span><span class="n">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">[</span><span class="nb">self</span> <span class="n">sendAuthRequest</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="n">void</span><span class="p">)</span><span class="n">sendAuthRequest</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="no">SendAuthReq</span> <span class="o">*</span><span class="n">req</span> <span class="o">=</span> <span class="o">[[</span><span class="no">SendAuthReq</span> <span class="n">alloc</span> <span class="o">]</span> <span class="n">init</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>    <span class="n">req</span><span class="o">.</span><span class="n">scope</span> <span class="o">=</span> <span class="err">@</span><span class="s2">&quot;snsapi_userinfo,snsapi_base&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">req</span><span class="o">.</span><span class="n">state</span> <span class="o">=</span> <span class="err">@</span><span class="s2">&quot;0744&quot;</span> <span class="p">;</span>
</span><span class='line'>    <span class="o">[</span><span class="no">WXApi</span> <span class="ss">sendReq</span><span class="p">:</span><span class="n">req</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里获取后会调用之前在AppDelegate里面的对应<code>oauthResp</code>回调，获得得到的<code>code</code>。</p>

<p>第二步：token和openid</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="p">(</span><span class="n">void</span><span class="p">)</span><span class="n">getAccess_token</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sr">//</span><span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">api</span><span class="o">.</span><span class="n">weixin</span><span class="o">.</span><span class="n">qq</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">sns</span><span class="o">/</span><span class="n">oauth2</span><span class="o">/</span><span class="n">access_token?appid</span><span class="o">=</span><span class="no">APPID</span><span class="o">&amp;</span><span class="n">secret</span><span class="o">=</span><span class="no">SECRET</span><span class="o">&amp;</span><span class="n">code</span><span class="o">=</span><span class="no">CODE</span><span class="o">&amp;</span><span class="n">grant_type</span><span class="o">=</span><span class="n">authorization_code</span>
</span><span class='line'>    <span class="no">NSString</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="o">[</span><span class="no">NSString</span> <span class="ss">stringWithFormat</span><span class="p">:</span><span class="err">@</span><span class="s2">&quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=%@&amp;secret=%@&amp;code=%@&amp;grant_type=authorization_code&quot;</span><span class="p">,</span><span class="n">kWXAPP_ID</span><span class="p">,</span><span class="n">kWXAPP_SECRET</span><span class="p">,</span><span class="nb">self</span><span class="o">.</span><span class="n">wxCode</span><span class="o">.</span><span class="n">text</span><span class="o">]</span><span class="p">;</span>   <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="no">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="no">NSURL</span> <span class="o">*</span><span class="n">zoneUrl</span> <span class="o">=</span> <span class="o">[</span><span class="no">NSURL</span> <span class="ss">URLWithString</span><span class="p">:</span><span class="n">url</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>        <span class="no">NSString</span> <span class="o">*</span><span class="n">zoneStr</span> <span class="o">=</span> <span class="o">[</span><span class="no">NSString</span> <span class="ss">stringWithContentsOfURL</span><span class="p">:</span><span class="n">zoneUrl</span> <span class="ss">encoding</span><span class="p">:</span><span class="no">NSUTF8StringEncoding</span> <span class="ss">error</span><span class="p">:</span><span class="kp">nil</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>        <span class="no">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="o">[</span><span class="n">zoneStr</span> <span class="ss">dataUsingEncoding</span><span class="p">:</span><span class="no">NSUTF8StringEncoding</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>        <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="no">NSDictionary</span> <span class="o">*</span><span class="n">dic</span> <span class="o">=</span> <span class="o">[</span><span class="no">NSJSONSerialization</span> <span class="ss">JSONObjectWithData</span><span class="p">:</span><span class="n">data</span> <span class="ss">options</span><span class="p">:</span><span class="no">NSJSONReadingMutableContainers</span> <span class="ss">error</span><span class="p">:</span><span class="kp">nil</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>              <span class="sr">/* </span>
</span><span class='line'><span class="sr">               { </span>
</span><span class='line'><span class="sr">               &quot;access_token&quot; = &quot;OezXcEiiBSKSxW0eoylIeJDUKD6z6dmr42JANLPjNN7Kaf3e4GZ2OncrCfiKnGWiusJMZwzQU8kXcnT1hNs_ykAFDfDEuNp6waj-bDdepEzooL_k1vb7EQzhP8plTbD0AgR8zCRi1It3eNS7yRyd5A&quot;; </span>
</span><span class='line'><span class="sr">               &quot;expires_in&quot; = 7200; </span>
</span><span class='line'><span class="sr">               openid = oyAaTjsDx7pl4Q42O3sDzDtA7gZs; </span>
</span><span class='line'><span class="sr">               &quot;refresh_token&quot; = &quot;OezXcEiiBSKSxW0eoylIeJDUKD6z6dmr42JANLPjNN7Kaf3e4GZ2OncrCfiKnGWi2ZzH_XfVVxZbmha9oSFnKAhFsS0iyARkXCa7zPu4MqVRdwyb8J16V8cWw7oNIff0l-5F-4-GJwD8MopmjHXKiA&quot;; </span>
</span><span class='line'><span class="sr">               scope = &quot;snsapi_userinfo,snsapi_base&quot;; </span>
</span><span class='line'><span class="sr">               } </span>
</span><span class='line'><span class="sr">               */</span>
</span><span class='line'>                <span class="nb">self</span><span class="o">.</span><span class="n">access_token</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="o">[</span><span class="n">dic</span> <span class="ss">objectForKey</span><span class="p">:</span><span class="err">@</span><span class="s2">&quot;access_token&quot;</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>                <span class="nb">self</span><span class="o">.</span><span class="n">openid</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="o">[</span><span class="n">dic</span> <span class="ss">objectForKey</span><span class="p">:</span><span class="err">@</span><span class="s2">&quot;openid&quot;</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>利用GCD来获取对应的<code>token</code>和<code>openID</code>.</p>

<p>第三步：userinfo</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="p">(</span><span class="n">void</span><span class="p">)</span><span class="n">getUserInfo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="sr">//</span> <span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">api</span><span class="o">.</span><span class="n">weixin</span><span class="o">.</span><span class="n">qq</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">sns</span><span class="o">/</span><span class="n">userinfo?access_token</span><span class="o">=</span><span class="no">ACCESS_TOKEN</span><span class="o">&amp;</span><span class="n">openid</span><span class="o">=</span><span class="no">OPENID</span>
</span><span class='line'>    <span class="no">NSString</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="o">[</span><span class="no">NSString</span> <span class="ss">stringWithFormat</span><span class="p">:</span><span class="err">@</span><span class="s2">&quot;https://api.weixin.qq.com/sns/userinfo?access_token=%@&amp;openid=%@&quot;</span><span class="p">,</span><span class="nb">self</span><span class="o">.</span><span class="n">access_token</span><span class="o">.</span><span class="n">text</span><span class="p">,</span><span class="nb">self</span><span class="o">.</span><span class="n">openid</span><span class="o">.</span><span class="n">text</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="no">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="no">NSURL</span> <span class="o">*</span><span class="n">zoneUrl</span> <span class="o">=</span> <span class="o">[</span><span class="no">NSURL</span> <span class="ss">URLWithString</span><span class="p">:</span><span class="n">url</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>        <span class="no">NSString</span> <span class="o">*</span><span class="n">zoneStr</span> <span class="o">=</span> <span class="o">[</span><span class="no">NSString</span> <span class="ss">stringWithContentsOfURL</span><span class="p">:</span><span class="n">zoneUrl</span> <span class="ss">encoding</span><span class="p">:</span><span class="no">NSUTF8StringEncoding</span> <span class="ss">error</span><span class="p">:</span><span class="kp">nil</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>        <span class="no">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="o">[</span><span class="n">zoneStr</span> <span class="ss">dataUsingEncoding</span><span class="p">:</span><span class="no">NSUTF8StringEncoding</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>        <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="no">NSDictionary</span> <span class="o">*</span><span class="n">dic</span> <span class="o">=</span> <span class="o">[</span><span class="no">NSJSONSerialization</span> <span class="ss">JSONObjectWithData</span><span class="p">:</span><span class="n">data</span> <span class="ss">options</span><span class="p">:</span><span class="no">NSJSONReadingMutableContainers</span> <span class="ss">error</span><span class="p">:</span><span class="kp">nil</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>                <span class="sr">/*{ </span>
</span><span class='line'><span class="sr">                 city = Haidian; </span>
</span><span class='line'><span class="sr">                 country = CN; </span>
</span><span class='line'><span class="sr">                 headimgurl = &quot;http:/</span><span class="n">wx</span><span class="o">.</span><span class="n">qlogo</span><span class="o">.</span><span class="n">cn</span><span class="o">/</span><span class="n">mmopen</span><span class="o">/</span><span class="no">FrdAUicrPIibcpGzxuD0kjfnvc2klwzQ62a1brlWq1sjNfWREia6W8Cf8kNCbErowsSUcGSIltXTqrhQgPEibYakpl5EokGMibMPU</span><span class="o">/</span><span class="mi">0</span><span class="s2">&quot;; </span>
</span><span class='line'><span class="s2">                 language = &quot;</span><span class="n">zh_CN</span><span class="s2">&quot;; </span>
</span><span class='line'><span class="s2">                 nickname = &quot;</span><span class="n">xxx</span><span class="s2">&quot;; </span>
</span><span class='line'><span class="s2">                 openid = oyAaTjsDx7pl4xxxxxxx; </span>
</span><span class='line'><span class="s2">                 privilege =     ( </span>
</span><span class='line'><span class="s2">                 ); </span>
</span><span class='line'><span class="s2">                 province = Beijing; </span>
</span><span class='line'><span class="s2">                 sex = 1; </span>
</span><span class='line'><span class="s2">                 unionid = oyAaTjsxxxxxxQ42O3xxxxxxs; </span>
</span><span class='line'><span class="s2">                 }*/   </span>
</span><span class='line'><span class="s2">                self.nickname.text = [dic objectForKey:@&quot;</span><span class="n">nickname</span><span class="s2">&quot;];  </span>
</span><span class='line'><span class="s2">                self.wxHeadImg.image = [UIImage imageWithData:[NSData dataWithContentsOfURL:[NSURL URLWithString:[dic objectForKey:@&quot;</span><span class="n">headimgurl</span><span class="s2">&quot;]]]];  </span>
</span><span class='line'><span class="s2">            }  </span>
</span><span class='line'><span class="s2">        });  </span>
</span><span class='line'><span class="s2">    });  </span>
</span><span class='line'><span class="s2">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>执行到这一步就算完成了整个授权登录的功能，能把昵称和头像显示出来，剩下的就是及时刷新你的token，详情可参考开发文档。</p>

<p>评价：微信的开发文档相比容易理解和调试，虽然没有demo，但是文档比较详细，所以可以在一定程度上减轻了开发的困难，但是相比之下微信的授权步骤比较麻 烦，需要三步才能彻底获取用户信息，这点没有QQ和新浪微博简洁，需要有一定的阅读和代码功底，希望能给大家带来帮助。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用Octopress搭建一个Github博客]]></title>
    <link href="http://devcatin.github.io/blog/2014/12/03/li-yong-octopressda-jian-%5B%3F%5D-ge-githubbo-ke/"/>
    <updated>2014-12-03T22:08:47+08:00</updated>
    <id>http://devcatin.github.io/blog/2014/12/03/li-yong-octopressda-jian-[?]-ge-githubbo-ke</id>
    <content type="html"><![CDATA[<h3>小引</h3>

<p><code>Octopress</code>是利用<code>Jekyll</code>博客引擎开发的一个博客系统，生成的静态页面能够很好的在github page上展现。号称是hacker专属的一个博客系统(<code>A blogging framework for hackers.</code>)
根据大家的反应，本文我就来介绍一下如何在苹果电脑(OS X 10.8.3)利用Octopress搭建一个Github博客。本文需要读者熟悉一些shell命令，并掌握基本的git操作。</p>

<!--more-->


<h3>目录</h3>

<ol>
<li>安装Ruby</li>
<li>安装Octopress</li>
<li>配置Octopress</li>
<li>将博客部署到GitHub上</li>
<li>开始写博客</li>
<li>更多操作</li>
<li>小结</li>
</ol>


<h3>1.安装Ruby</h3>

<p>Octopress需要Ruby环境，RVM(Ruby Version Manager)负责安装和管理Ruby的环境。所以我们先在终端输入如下命令，来安装RVM：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -L https://get.rvm.io | bash -s stable --ruby</span></code></pre></td></tr></table></div></figure>


<p>接着是安装Ruby 1.9.3，在终端依次运行如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm install 1.9.3                                                   
</span><span class='line'>$ rvm use 1.9.3                
</span><span class='line'>$ rvm rubygems latest</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>完成上面的操作之后，运行<code>ruby --version</code>应该可以看到ruby 1.9.3环境已经安装好了。 <br/>
参考：<a href="http://octopress.org/docs/setup/rvm/">Installing Ruby With RVM</a></p>

<h3>2.安装Octopress</h3>

<p>在安装Octopress之前，请确保你的电脑上已经安装有git了，在终端输入<code>git --version</code>，应该可以看到电脑中的git版本(我电脑上输出:<code>git version 1.7.12.4 (Apple Git-37)</code>)，如果没有显示相关内容，请先安装git。
git安装之后，利用git命令将octopress从github上clone到本机，如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git://github.com/imathis/octopress.git octopress                
</span><span class='line'>$ cd octopress    # If you use RVM, You'll be asked if you trust           the .rvmrc file (say yes).   
</span><span class='line'>$ ruby --version  # Should report Ruby 1.9.3</span></code></pre></td></tr></table></div></figure>


<p>接着安装相关依赖项：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install bundler
</span><span class='line'>$ rbenv rehash    # If you use rbenv, rehash to be able to run   $ the bundle command
</span><span class='line'>$ bundle install</span></code></pre></td></tr></table></div></figure>


<p>最后安装默认的Octopress 主题。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake install</span></code></pre></td></tr></table></div></figure>


<p>参考： <a href="http://octopress.org/docs/setup/">Octopress Setup</a></p>

<h3>3.配置Octopress</h3>

<p>Octopress的作者已经尽量让配置简化了。大多数情况下只需要配置<code>_config.yml</code>和<code>Rakefile</code>文件即可。其中Rakefile是跟博客部署相关，一般情况下并不需要修改这个文件，除非使用了rsync。
config.yml是博客重要的一个配置文件，在config.yml文件中有三大配置项：<code>Main Configs</code>、<code>Jekyll &amp; Plugins</code>和<code>3rd Party Settings</code>。</p>

<p>一般，该文件中其中<code>url</code>是必须要填写的，这里的url是在github上创建的一个仓库地址，具体请看第四步中创建的地址。另外再修改一下<code>title</code>、<code>subtitle</code>和<code>author</code>，根据需求，在开启一些第三方组件服务。
关于_config.yml文件中的更多内容，请看这里的内容：<a href="http://octopress.org/docs/configuring/">Configuring Octopress</a></p>

<p>建议：最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。同理，修改定制文件/source/_includes/custom/head.html 把google的自定义字体去掉。from<a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">唐巧的博文中—配置</a>。</p>

<h3>4.将博客部署到GitHub上</h3>

<p>Github的<a href="https://pages.github.com/">Page service</a>可以免费托管博客，并且还可以自定义域名。
首先需要在GitHub上<a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">创建一个仓库</a>，并将仓库名称按照这样的方式进行命名：<code>username.github.com</code>或<code>organization.github.com</code>。等后面配置完毕之后，我们就可以在浏览器中使用页面地址<code>http://username.github.com</code>来访问我们的博客。一般来说，我们希望在将博客的源码放到source分支下，并把生成的内容提交到master分支。</p>

<p>创建好仓库之后，我们需要利用octopress的一个<code>配置rake任务</code>来自动配置上面创建的仓库：可以让我们方便的部署GitHub page。在终端输入如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>上面的命令会做一些事情(详细介绍看下面给出的参考链接)。其中最主要的就是创建一个<code>_deploy</code>目录，目录用来存放部署到master分支的内容。期间会要求你输入仓库的url，根据提示，进行输入即可。</p>

<p>完成上面的命令之后，我们就可以生成博客并真正的部署到仓库中了。执行如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<p>上面的命令首先生成博客文件，并将生成的博客文件拷贝到<code>_deploy/</code>目录下，然后将这些内容添加到git中，并commit和push到仓库的master分支。</p>

<p>现在可以访问<code>http://username.github.com</code>了。注意：有时候可能会有延时，要等几分钟才能打开。此处的username必须和你github账号名一致。</p>

<p>至此，我们的博客已经完成基本的部署，不过博客的source需要单独提交，执行如下命令就可以将source提交到仓库的source分支下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'>$ git commit -m 'Initial source commit'
</span><span class='line'>$ git push origin source</span></code></pre></td></tr></table></div></figure>


<p>如果在部署到仓库之前，需要先预览一下博客，可以在终端输入<code>rake preview</code>命令，然后就能在浏览器中进行本地预览访问了：<code>http://127.0.0.1:4000/</code>或<code>http://localhost:4000/</code>，效果跟仓库中的一样。
参考：<a href="http://octopress.org/docs/deploying/">Deploying to Github Pages</a></p>

<h3>5.开始写博客</h3>

<p>Octopress为我们提供了一些task来创建博文和页面。博文必须存储在<code>source/_posts</code>目录下，并且需要按照Jekyll的命名规范对文章进行命名：<code>YYYY-MM-DD-post-title.markdown</code>。文章的名字会被当做url的一部分，而其中的日期用于对博文的区分和排序。</p>

<p>通过Octopress提供的task可以正确的按照命名规范创建一个博文，并且在博文中会附带常用的一些yaml元数据。只需要在终端输入如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake new_post["title"]</span></code></pre></td></tr></table></div></figure>


<p>其中title为博文的文件名，创建出来的文件默认是markdown格式。上面的命令会创建出这样一个文件：<code>source/_posts/2013-08-03-title.markdown</code>。打开这个文件，可以看到里面有如下一些内容了(告诉Jekyll博客引擎如何处理博文和页面)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>layout: post
</span><span class='line'>title: "title"
</span><span class='line'>date: 2013-08-03 16:36
</span><span class='line'>comments: true
</span><span class='line'>categories: </span></code></pre></td></tr></table></div></figure>


<p>接着我们就可以在这个文件中写我们的博文啦。完成之后，我们可以预览和部署博文。下面是创建并部署博文的一个完整过程：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake new_post["New Post"]
</span><span class='line'>$ rake generate
</span><span class='line'>$ git add .
</span><span class='line'>$ git commit -m "Some comment here." 
</span><span class='line'>$ git push origin source
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<p>参考：<a href="http://octopress.org/docs/blogging/">Blogging Basics</a></p>

<h3>6.更多操作</h3>

<p>在搭建博客的时候，我们可能会对博客做一些配置，例如添加评论、域名解析、分享等。这些内容我写在另外一篇文章中，会经常更新，请前往观看：<a href="http://beyondvincent.com/blog/2013/07/27/107-hello-page-of-github/">你好！github页面</a>。</p>

<h3>7.小结</h3>

<p>本文介绍了如何利用Octopress搭建一个Github博客。大家在搭建的时候，要是遇到问题，可以回复我。本文转载至：<a href="http://beyondvincent.com/2013/08/03/2013-08-03-108-creating-a-github-blog-using-octopress/">破船之家</a>.</p>
]]></content>
  </entry>
  
</feed>
